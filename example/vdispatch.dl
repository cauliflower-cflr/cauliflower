/*
 * This file records how we generate input CSV files from datalog facts
 * I'm prepared to believe what we are doing is not accurate, (we definitely
 * do not capture full java semantics, and i wouldnt be surprised if we got
 * some of the relations backwards)  However, this still generates a
 * representative problem, which we canalyse
 */

#define Int number
#define SHOW printsize
#define OUTPUT printsize output

/* +-------+
   | TYPES |
   +-------+ */

.type Type
.type Var
.type HeapAllocation
.type Field

.type MethodSignature
.type Callsite
.type MethodName
.type MethodDescriptor

.type Cruft // i use this whenever i have a relation that i dont care about

/* +--------------+
   | DECLARATIONS |
   +--------------+ */

// types
.decl DirectSuperclass(sub:Type, super:Type)  input
.decl DirectSuperinterface(sub:Type, super:Type)  input
.decl ClassType(cla:Type) input

// methods
.decl Method(sig:MethodSignature, name:MethodName, desc:MethodDescriptor, owner:Type, return:Cruft, short_desc:Cruft) input
.decl FormalParam(index:Int, sig:MethodSignature, param:Var) input
.decl ThisVar(sig:MethodSignature, this:Var) input
.decl Return(instruction:Cruft, instruction_num:Int, ret:Var, sig:MethodSignature) input

// invocations
.decl ActualParam(index:Int, callsite:Callsite, param:Var) input
.decl VirtualMethodInvocation(ref:Callsite, index:Int, called_method:MethodSignature, reciever:Var, caller:MethodSignature) input
.decl SpecialMethodInvocation(ref:Callsite, index:Int, called_method:MethodSignature, reciever:Var, caller:MethodSignature) input
.decl StaticMethodInvocation(ref:Callsite, index:Int, called_method:MethodSignature, caller:MethodSignature) input
.decl AssignReturnValue(site:Callsite, ret:Var) input

// assignments
.decl AssignCast(instruction:Cruft, instruction_num:Int, from:Var, to:Var, ty:Type, context:MethodSignature) input
.decl AssignLocal(instruction:Cruft, instruction_num:Int, variableAssigned:Var, variableAssignedTo:Var, containingMethod:MethodSignature)  input
.decl VarType(variable:Var, declaredType:Type) input

// allocs
.decl AssignHeapAllocation(instruction:Cruft, instruction_num:Int, heapAllocation:HeapAllocation, variableAssignedTo:Var, containingMethod:MethodSignature)  input
.decl NormalHeap(alloc:HeapAllocation, ty:Type) input

// load and store
.decl LoadInstanceField(instruction:Cruft, instruction_num:Int, instanceVariable:Var, field:Field, variableAssignedTo:Var, containingMethod:MethodSignature)  input
.decl StoreInstanceField(instruction:Cruft, instruction_num:Int, storedVariable:Var, instanceVariable:Var, field:Field, containingMethod:MethodSignature)  input

/* +------+
   | CSVs |
   +------+ */

.decl RAssign(varAssigned:Var, varAssignedTo:Var) 
RAssign(localVarAssigned, localVarAssignedTo) :- 
  AssignLocal(_, _, localVarAssigned, localVarAssignedTo, _).
RAssign(var2, var1) :-         
  AssignCast(_, _, var2, var1, _, _).
RAssign(actual, formal) :-
  StaticMethodInvocation(site, _, method, _),
  FormalParam(index, method, formal),
  ActualParam(index, site, actual).

.decl Assign(lhs:Var, rhs:Var) OUTPUT
Assign(x,y) :- 
  RAssign(y,x).

// conservative assignment (and conservative dispatch)
.decl CDispatch(s:Callsite, m:MethodSignature)
.decl ReflexSubclass(sub:Type, super:Type)
.decl AssignConservative(lhs:Var, rhs:Var) OUTPUT
ReflexSubclass(cl, cl) :- ClassType(cl).
ReflexSubclass(sub, super) :- ReflexSubclass(sub, mid), DirectSuperclass(mid, super).
ReflexSubclass(sub, super) :- ReflexSubclass(sub, mid), DirectSuperinterface(mid, super).
ReflexSubclass(sub, sub) :- ReflexSubclass(sub, _).
ReflexSubclass(super, super) :- ReflexSubclass(_, super).
CDispatch(s, m) :- Receiver(v, s, n, d), VarType(v, super), ReflexSubclass(sub, super), Definer(sub, m, n, d).
AssignConservative(l, r) :- Assign(l, r).
AssignConservative(l, r) :- Formal(l, m, i), CDispatch(s, m), Actual(r, s, i).
AssignConservative(l, r) :- ReturnCallsite(l, s), CDispatch(s, m), ReturnMethod(r, m).

.decl Alloc(x:Var, o:HeapAllocation) OUTPUT
Alloc(var, heap)  :- 
  AssignHeapAllocation(_, _, heap, var, _).

.decl AllocType(o:HeapAllocation, t:Type) OUTPUT
AllocType(o, t) :-
  AssignHeapAllocation(_, _, o, _, _), NormalHeap(o, t).

// fields

.decl Store(src:Var, base:Var, field:Field) OUTPUT
Store(s, b, f) :- StoreInstanceField(_, _, s, b, f, _).

.decl Load(base:Var, dst:Var, field:Field) OUTPUT
Load(b, d, f) :- LoadInstanceField(_, _, b, f, d, _).

// parameter passing

.decl Actual(v:Var, s:Callsite, i:Int) OUTPUT
Actual(v, s, i+1) :- ActualParam(i, s, v). // in doop, param 0 is the first argument, i want 0 to be the "this" object
Actual(v, s, 0) :- VirtualMethodInvocation(s, _, _, v, _).
Actual(v, s, 0) :- SpecialMethodInvocation(s, _, _, v, _).

.decl Formal(v:Var, m:MethodSignature, i:Int) OUTPUT
Formal(v, m, i+1) :- FormalParam(i, m, v).
Formal(v, m, 0) :- ThisVar(m, v).

.decl ReturnMethod(v:Var, m:MethodSignature) OUTPUT
ReturnMethod(v, m) :- Return(_, _, v, m).

.decl ReturnCallsite(V:Var, s:Callsite) OUTPUT
ReturnCallsite(v, s) :- AssignReturnValue(s, v).

// virtual dispatch
.decl Receiver(v:Var, s:Callsite, n:MethodName, d:MethodDescriptor) OUTPUT
Receiver(v, s, n, d) :- VirtualMethodInvocation(s, _, m, v, _), Method(m, n, d, _, _, _).
Receiver(v, s, n, d) :- SpecialMethodInvocation(s, _, m, v, _), Method(m, n, d, _, _, _).

.decl Definer(t:Type, m:MethodSignature, n:MethodName, d:MethodDescriptor) OUTPUT
Definer(t, m, n, d) :- Method(m, n, d, t, _, _).
Definer(subT, superM, n, d) :- DirectSuperclass(subT, superT), Definer(superT, superM, n, d), !Method(_, n, d, subT, _, _).

// pseudo analysis
.decl PointsTo(v:Var, o:HeapAllocation) SHOW
// .decl PointsToC(v:Var, o:HeapAllocation) SHOW
.decl VDispatch(s:Callsite, m:MethodSignature) SHOW
.decl XAssign(lhs:Var, rhs:Var) SHOW

PointsTo(v, o) :- Alloc(v, o).
PointsTo(lhs, o) :- Assign(lhs, rhs), PointsTo(rhs, o).
PointsTo(lhs, o) :- XAssign(lhs, rhs), PointsTo(rhs, o).

XAssign(lv, sv) :- Load(lb, lv, f), PointsTo(lb, alias), PointsTo(sb, alias), Store(sv, sb, f).
XAssign(formal, actual) :- Formal(formal, m, i), VDispatch(s, m), Actual(actual, s, i).
XAssign(sr, mr) :- ReturnCallsite(sr, s), VDispatch(s, m), ReturnMethod(mr, m).

VDispatch(s, m) :- Receiver(v, s, n, d), PointsTo(v, o), AllocType(o, t), Definer(t, m, n, d).

// PointsToC(v, o) :- Alloc(v, o).
// PointsToC(lhs, o) :- AssignConservative(lhs, rhs), PointsToC(rhs, o).
// PointsToC(lv, o) :- Load(lb, lv, f), PointsToC(lb, alias), PointsToC(sb, alias), Store(sv, sb, f), PointsToC(sv, o).

